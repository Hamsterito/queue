import telebot
from telebot import types
from bd_queue import conn,cursor
from datetime import datetime,timedelta
from collections import defaultdict
import threading
import time

bot = telebot.TeleBot('YOUR KEY')

NAME, LASTNAME, CONFIRMATION, SELECT_MONTH, SELECT_DAY, SELECT_TIME = range(6)

sent_notifications = {}

user_data = {}

sent_notifications = defaultdict(lambda: {
    '1_day': None,
    '1_hour': None,
    '30_min': None,
    '5_min': None,
    'status_process': None,
    'status_completed': None
})

MAX_BOOKINGS_PER_TIME_SLOT = 3
WORKING_MONTHS = [12]


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    cursor.execute("SELECT telegram_id FROM customers WHERE telegram_id = %s", (user_id,))
    existing_user = cursor.fetchone()

    if existing_user:
        bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –º–µ–Ω—é.")
        menu(user_id)
    else:
        inline_markup = types.InlineKeyboardMarkup()
        inline_registration_button = types.InlineKeyboardButton(text="‚úèÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        inline_authorization_button = types.InlineKeyboardButton(text="üóíÔ∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data="–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        inline_markup.add(inline_registration_button, inline_authorization_button)
        bot.send_message(user_id, "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    user_id = call.message.chat.id
    data = call.data

    if data == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        cursor.execute("SELECT 1 FROM customers WHERE telegram_id = %s", (user_id,))
        if cursor.fetchone() is not None:
            bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            menu(user_id)
        else:
            bot.send_message(user_id, "–í—ã –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            user_data[user_id] = {'state': NAME}
            bot.send_message(user_id, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=types.ReplyKeyboardRemove())


    elif data == "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è":
        user_data[user_id] = {'state': CONFIRMATION}
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞,–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å", reply_markup=types.ReplyKeyboardRemove())



    elif data == "confirm_registration":
        cursor.execute("SELECT telegram_id FROM customers WHERE telegram_id = %s", (user_id,))
        existing_user = cursor.fetchone()

        if existing_user:
            bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        else:
            full_name = f"{user_data[user_id]['name']} {user_data[user_id]['lastname']}"
            cursor.execute(""" 
                INSERT INTO customers (telegram_id, full_name) 
                VALUES (%s, %s)
            """, (user_id, full_name))
            conn.commit()

            bot.send_message(user_id, "–í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
        user_data.pop(user_id, None)
        menu(user_id)

    elif data == "retry_registration":
        cursor.execute("SELECT telegram_id FROM customers WHERE telegram_id = %s", (user_id,))
        existing_user = cursor.fetchone()

        if existing_user:
            bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –º–µ–Ω—é.")
            menu(user_id)
        else:
            user_data[user_id]['state'] = NAME
            bot.send_message(user_id, "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

    elif data == "back_to_menu_selection":
        menu(call.message.chat.id)

    elif data == 'book_slot':
        book_slot(call.message)

    elif data.startswith("confirm_cancel_"):
        confirm_cancel(call)

    elif data == "cancel_booking":
        cancel_booking(call.message)

    elif data.startswith("help"):
        send_help_info(call)

    elif data.startswith("date_"):
        selected_date = data.split('_')[1]
        selected_date_obj = datetime.fromisoformat(selected_date).date()
        handle_date_selection(call, selected_date_obj)

    elif data.startswith("time_"):
        handle_time_selection(call)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.chat.id

    if user_id not in user_data:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë.")
        return

    state = user_data[user_id].get('state', None)

    if state is None:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë.")
        return

    if state == NAME:
        name = message.text
        if not name.isalpha():
            bot.send_message(user_id, "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è —Å–Ω–æ–≤–∞.")
        else:
            user_data[user_id]['name'] = name
            user_data[user_id]['state'] = LASTNAME
            bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –ê –∫–∞–∫ –≤–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è?")

    elif state == LASTNAME:
        lastname = message.text
        if not lastname.isalpha():
            bot.send_message(user_id, "–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é —Å–Ω–æ–≤–∞.")
        else:
            user_data[user_id]['lastname'] = lastname
            user_data[user_id]['state'] = CONFIRMATION

            data_text = f"–ò–º—è: {user_data[user_id]['name']}\n–§–∞–º–∏–ª–∏—è: {user_data[user_id]['lastname']}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
            pl_markup = types.InlineKeyboardMarkup()
            pl_yes_button = types.InlineKeyboardButton(text="–î–∞", callback_data="confirm_registration")
            pl_retry_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="retry_registration")
            pl_markup.add(pl_yes_button, pl_retry_button)
            bot.send_message(user_id, data_text, reply_markup=pl_markup)


def menu(user_id):
    menu_markup = types.InlineKeyboardMarkup(row_width=2)
    book_button = types.InlineKeyboardButton(text='üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', callback_data='book_slot')
    cancel_button = types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data='cancel_booking')
    help_button = types.InlineKeyboardButton(text='‚ÑπÔ∏è –ü–æ–º–æ—â—å', callback_data='help')
    menu_markup.add(book_button, cancel_button, help_button)
    bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_markup)

def send_help_info(call):
    user_id = call.message.chat.id
    
   
    help_text = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º. –í–æ—Ç –∫–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –º–µ–Ω—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n"
        
        "1. **üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º**:\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –∏ –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è. –¢—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –≤–∏–∑–∏—Ç–∞.\n\n"

        "**‚ùóÔ∏è–í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**:\n"
        "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 –¥–Ω—è. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è 19 –∞–≤–≥—É—Å—Ç–∞, —Ç—ã –º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ 20 –∏–ª–∏ 21 –∞–≤–≥—É—Å—Ç–∞, "
        "–Ω–æ –Ω–µ –Ω–∞ –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏–µ –∏–ª–∏ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–∏–µ –¥–∞—Ç—ã.\n\n"
        
        
        "2. **‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å**:\n"
        "–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∑–∞–ø–∏—Å—å, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å'. –Ø –ø–æ–∫–∞–∂—É —Ç–≤–æ—é —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å, "
        "–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ—Ç–º–µ–Ω–∏—Ç—å –ª–∏–±–æ –Ω–∞–∑–∞–¥ —á—Ç–æ –±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é.–ò –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –≤—ã –º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º\n\n"
        
        "3. **üìä –¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å**:\n"
        "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã –∑–∞–ø–∏—à–µ—à—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º —è –ø–æ–∫–∞–∂—É —Ç–≤–æ–π –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏, –∫–æ–≥–¥–∞ —Ç—ã –∑–∞–ø–∏—à–µ—à—å—Å—è –Ω–∞ –ø—Ä–∏–µ–º.\n"
        "–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ: –∫–æ–≥–¥–∞ —Ç–≤–æ–π –ø—Ä–∏–µ–º –Ω–∞—á–Ω–µ—Ç—Å—è –∏ –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.\n\n"
        
        "4. **‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è**:\n"
        "–Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞ –¥–µ–Ω—å, –∑–∞ —á–∞—Å, –∑–∞ 30 –º–∏–Ω—É—Ç –∏ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–µ–º–∞.\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã—Ç—å –æ –≤–∏–∑–∏—Ç–µ!\n\n"
            
        f"‚ùóÔ∏è –í–∞–∂–Ω–æ: –Ω–∞ –∫–∞–∂–¥—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–æ–ª—å–∫–æ {MAX_BOOKINGS_PER_TIME_SLOT} —á–µ–ª–æ–≤–µ–∫–∞. "
        f"–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ç—ã –≤—ã–±—Ä–∞–ª —Å–ª–æ—Ç –≤ 14:00, –∏ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å {MAX_BOOKINGS_PER_TIME_SLOT} —á–µ–ª–æ–≤–µ–∫–∞, "
        "—Ç—ã –Ω–µ —Å–º–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–æ—Ç —Å–ª–æ—Ç –∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π.\n\n"

    )
    
    bot.send_message(user_id, help_text)
    menu(user_id)



def book_slot(message):
    user_id = message.chat.id
    
    today = datetime.today().date()

    available_dates = [
        today + timedelta(days=i) 
        for i in range(1, 3) 
        if (today + timedelta(days=i)).month in WORKING_MONTHS
    ] 

    if not available_dates:
        bot.send_message(user_id, "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø–∏—Å—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    markup = types.InlineKeyboardMarkup(row_width=1)
    
    for date in available_dates:
        date_str = date.strftime('%d.%m.%Y')
        date_button = types.InlineKeyboardButton(text=date_str, callback_data=f"date_{date.isoformat()}")
        markup.add(date_button)
    
    back_button = types.InlineKeyboardButton(text="<--\n–ù–∞–∑–∞–¥", callback_data="back_to_menu_selection")
    markup.add(back_button)
    
    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ (–¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –¥–≤–∞ –¥–Ω—è):", reply_markup=markup)


def handle_date_selection(call, selected_date_obj):
    user_id = call.message.chat.id

    times = ["10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00"]
    markup = types.InlineKeyboardMarkup(row_width=3)
    row = []

    for time_slot in times:
        selected_datetime = datetime.combine(selected_date_obj, datetime.strptime(time_slot, '%H:%M').time())
        cursor.execute("""SELECT COUNT(*) FROM online_queue
                          WHERE scheduled_time = %s AND status = '–æ–∂–∏–¥–∞–Ω–∏–µ'""", (selected_datetime,))
        booking_count = cursor.fetchone()[0]

        if booking_count < MAX_BOOKINGS_PER_TIME_SLOT:
            callback_data = f"time_{selected_date_obj.isoformat()}_{time_slot}"
            row.append(types.InlineKeyboardButton(time_slot, callback_data=callback_data))

        if len(row) == 3:
            markup.add(*row)
            row = []

    if row:
        markup.add(*row)

    back_button = types.InlineKeyboardButton(text="<--\n–ù–∞–∑–∞–¥", callback_data="back_to_menu_selection")
    markup.add(back_button)

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã:", reply_markup=markup)


def handle_time_selection(call):
    user_id = call.message.chat.id
    selected_date, selected_time = call.data.split('_')[1], call.data.split('_')[2]

    selected_datetime = datetime.fromisoformat(selected_date).replace(
        hour=int(selected_time.split(':')[0]),
        minute=int(selected_time.split(':')[1])
    )

    cursor.execute("""SELECT COUNT(*) FROM online_queue
                      WHERE telegram_id = %s AND status = '–æ–∂–∏–¥–∞–Ω–∏–µ'""", (user_id,))
    existing_booking = cursor.fetchone()[0]

    if existing_booking > 0:
        bot.send_message(user_id, "–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º. –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞.")
        menu(user_id)
        return

    cursor.execute("""SELECT COUNT(*) FROM online_queue
                      WHERE scheduled_time = %s AND status = '–æ–∂–∏–¥–∞–Ω–∏–µ'""", (selected_datetime,))
    booking_count = cursor.fetchone()[0]

    if booking_count >= MAX_BOOKINGS_PER_TIME_SLOT:
        bot.send_message(user_id, "–ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
        return

    cursor.execute("SELECT customer_id FROM customers WHERE telegram_id = %s", (user_id,))
    customer = cursor.fetchone()

    if customer is None:
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –∑–∞–ø–∏—Å–∏.")
        return

    customer_id = customer[0]
    queue_number = generate_queue_number()

    cursor.execute(""" 
        INSERT INTO online_queue (customer_id, scheduled_time, status, telegram_id, queue_number)
        VALUES (%s, %s, %s, %s, %s)
    """, (customer_id, selected_datetime, "–æ–∂–∏–¥–∞–Ω–∏–µ", user_id, queue_number))

    conn.commit()

    bot.send_message(user_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ {selected_datetime.strftime('%Y-%m-%d %H:%M')}.\n–í–∞—à –Ω–æ–º–µ—Ä –≤ –æ—á–µ—Ä–µ–¥–∏: {queue_number}.")
    menu(user_id)




def cancel_booking(message):
    user_id = message.chat.id

    cursor.execute("""SELECT scheduled_time FROM online_queue
                      WHERE customer_id = (SELECT customer_id FROM customers WHERE telegram_id = %s) 
                      AND status = '–æ–∂–∏–¥–∞–Ω–∏–µ'""", (user_id,))
    booking = cursor.fetchone()

    if booking:
        scheduled_time = booking[0]
        formatted_time = scheduled_time.strftime("%Y-%m-%d %H:%M")
        confirmation_markup = types.InlineKeyboardMarkup()
        confirmation_markup.add(
            types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data=f"confirm_cancel_{formatted_time}"),
            types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu_selection")
        )
        bot.send_message(user_id, f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ {formatted_time}. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?", reply_markup=confirmation_markup)
    else:
        bot.send_message(user_id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        menu(user_id)


def confirm_cancel(call):
    user_id = call.message.chat.id
    cancellation_time = call.data.split('_')[-1]

    try:
        cursor.execute(""" 
            DELETE FROM online_queue
            WHERE customer_id = (SELECT customer_id FROM customers WHERE telegram_id = %s)
        """, (user_id,))
        conn.commit()

        bot.send_message(user_id, f"–ó–∞–ø–∏—Å—å –Ω–∞ {cancellation_time} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏: {str(e)}")

    menu(user_id)


def generate_queue_number():
    cursor.execute("SELECT MAX(queue_id) FROM online_queue")
    max_online_queue_id = cursor.fetchone()[0] or 0

    cursor.execute("SELECT MAX(queue_id) FROM live_queue")
    max_live_queue_id = cursor.fetchone()[0] or 0

    max_queue_id = max(max_online_queue_id, max_live_queue_id)

    if max_queue_id >= 999:
        cursor.execute("DELETE FROM online_queue")
        cursor.execute("DELETE FROM live_queue")
        conn.commit()
        print("–î–∞–Ω–Ω—ã–µ –∏–∑ –æ–±–µ–∏—Ö —Ç–∞–±–ª–∏—Ü –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π queue_id –¥–æ—Å—Ç–∏–≥ 999.")

        cursor.execute("SELECT setval('online_queue_queue_id_seq', 1, false)")
        cursor.execute("SELECT setval('live_queue_queue_id_seq', 1, false)")
        conn.commit()

        queue_number = f"{1:03d}"
    else:
        if max_queue_id == 0:
            cursor.execute("SELECT setval('online_queue_queue_id_seq', 1, false)")
            cursor.execute("SELECT setval('live_queue_queue_id_seq', 1, false)")
        else:
            cursor.execute("SELECT setval('online_queue_queue_id_seq', %s, false)", (max_queue_id,))
            cursor.execute("SELECT setval('live_queue_queue_id_seq', %s, false)", (max_queue_id,))
        conn.commit()

        cursor.execute("SELECT nextval('online_queue_queue_id_seq')")
        online_queue_id = cursor.fetchone()[0]

        cursor.execute("SELECT nextval('live_queue_queue_id_seq')")
        live_queue_id = cursor.fetchone()[0]

        final_queue_id = max(online_queue_id, live_queue_id)

        queue_number = f"{final_queue_id:03d}"

    return queue_number


def send_time_based_notifications():
    while True:
        current_time = datetime.now()

        cursor.execute("""
            SELECT q.telegram_id, q.scheduled_time, c.full_name, q.status
            FROM online_queue q
            JOIN customers c ON q.telegram_id = c.telegram_id
            WHERE q.status = '–æ–∂–∏–¥–∞–Ω–∏–µ'
        """)

        records = cursor.fetchall()

        for record in records:
            telegram_id, scheduled_time_str, full_name, status = record

            if telegram_id not in sent_notifications:
                sent_notifications[telegram_id] = {'1_day': None, '1_hour': None, '30_min': None, '5_min': None}

            if isinstance(scheduled_time_str, str):
                try:
                    scheduled_time = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M')
                except ValueError:
                    continue
            elif isinstance(scheduled_time_str, datetime):
                scheduled_time = scheduled_time_str
            else:
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏: {scheduled_time_str}")
                continue

            time_to_appointment = scheduled_time - current_time

            if time_to_appointment >= timedelta(days=1) and time_to_appointment < timedelta(days=2):
                if sent_notifications[telegram_id]['1_day'] is None:
                    message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}!\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à –ø—Ä–∏–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%Y-%m-%d %H:%M')}. –û–Ω —Å–æ—Å—Ç–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å."
                    bot.send_message(telegram_id, message)
                    sent_notifications[telegram_id]['1_day'] = current_time

            elif time_to_appointment >= timedelta(hours=1) and time_to_appointment < timedelta(hours=2):
                if sent_notifications[telegram_id]['1_hour'] is None:
                    message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}!\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à –ø—Ä–∏–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%Y-%m-%d %H:%M')}. –û–Ω —Å–æ—Å—Ç–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ 1 —á–∞—Å."
                    bot.send_message(telegram_id, message)
                    sent_notifications[telegram_id]['1_hour'] = current_time

            elif time_to_appointment >= timedelta(minutes=30) and time_to_appointment < timedelta(minutes=31):
                if sent_notifications[telegram_id]['30_min'] is None:
                    message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}!\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à –ø—Ä–∏–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%Y-%m-%d %H:%M')}. –û–Ω —Å–æ—Å—Ç–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç."
                    bot.send_message(telegram_id, message)
                    sent_notifications[telegram_id]['30_min'] = current_time

            elif time_to_appointment >= timedelta(minutes=5) and time_to_appointment < timedelta(minutes=6):
                if sent_notifications[telegram_id]['5_min'] is None:
                    message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}!\n–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à –ø—Ä–∏–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {scheduled_time.strftime('%Y-%m-%d %H:%M')}. –û–Ω —Å–æ—Å—Ç–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç."
                    bot.send_message(telegram_id, message)
                    sent_notifications[telegram_id]['5_min'] = current_time

        time.sleep(10)


def check_status_changes():
    while True:
        cursor.execute("""
            SELECT q.telegram_id, q.status, q.scheduled_time, c.full_name
            FROM online_queue q
            JOIN customers c ON q.telegram_id = c.telegram_id
            WHERE q.status IN ('–ø—Ä–æ—Ü–µ—Å—Å', '–∑–∞–≤–µ—Ä—à–µ–Ω')
        """)
        records = cursor.fetchall()

        for record in records:
            telegram_id, status, scheduled_time_str, full_name = record
            current_time = datetime.now()

            if isinstance(scheduled_time_str, str):
                try:
                    scheduled_time = datetime.strptime(scheduled_time_str, '%Y-%m-%d %H:%M')  
                except ValueError:
                    print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è {telegram_id}: {scheduled_time_str}")
                    continue
            elif isinstance(scheduled_time_str, datetime):
                scheduled_time = scheduled_time_str 
            else:
                print(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏: {scheduled_time_str}")
                continue

            if status == '–ø—Ä–æ—Ü–µ—Å—Å':
                if telegram_id not in sent_notifications:
                    sent_notifications[telegram_id] = {}
                
                if sent_notifications[telegram_id].get('status_process') is None:
                    message = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {full_name}!\n–í–∞—à –ø—Ä–∏–µ–º –Ω–∞—á–∞–ª—Å—è –≤ {scheduled_time.strftime('%Y-%m-%d %H:%M')}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ."
                    bot.send_message(telegram_id, message)
                    
                    sent_notifications[telegram_id]['status_process'] = current_time


            elif status == '–∑–∞–≤–µ—Ä—à–µ–Ω':
                if sent_notifications.get(telegram_id, {}).get('status_completed') is None:
                    message = f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ—Å–µ—Ç–∏–ª–∏ –Ω–∞—Å, {full_name}!\n–í–∞—à –ø—Ä–∏–µ–º –±—ã–ª –∑–∞–≤–µ—Ä—à–µ–Ω. –î–æ –≤—Å—Ç—Ä–µ—á–∏!"
                    bot.send_message(telegram_id, message)
                    
                    if telegram_id not in sent_notifications:
                        sent_notifications[telegram_id] = {}
                    
                    sent_notifications[telegram_id]['status_completed'] = current_time


        time.sleep(10)


time_monitor_thread = threading.Thread(target=send_time_based_notifications)
time_monitor_thread.daemon = True
time_monitor_thread.start()

status_monitor_thread = threading.Thread(target=check_status_changes)
status_monitor_thread.daemon = True
status_monitor_thread.start()

bot.polling(none_stop=True)

